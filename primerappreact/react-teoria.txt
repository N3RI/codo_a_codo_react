node -v [v18.17.1]
npm -v [10.2.3]
npx create-react-app primerappreact
cd primerappreact
npm start

npm install --save-dev @babel/preset-react

npm install -g npm (sirve para descargar la última versión de npm)
npm install <nombre_del_paquete>

npm i <paquete> (para instalar)
npm un <paquete> (para desinstalar)
npm up <paquete>” (para actualizar)

npm init (para configurar un paquete de npm nuevo o uno existente. npm init crea un fichero package.json)

ES5 función normal
var miFuncion = function(num) {
returnnum + num;
}
ES6 función arrow más corta y fácil de leer
var miFuncion = (num) => num + num;

classLibro{
	constructor(tematica, paginas, autor) {
		this.tematica=tematica;
		this.paginas=paginas; this.autor=autor;
	}
	metodo() {
		// ...
	}
}

Template Strings ES6 concatenar cadenas
ES6
let nombre1 = "JavaScript";
let nombre2 = "awesome";
console.log(`Sólo quiero decir que ${nombre1} is ${nombre2`});

Valores por defecto
ES5
function(valor) { 
	valor = valor || "foo";
}
ES6
function(valor = "foo") {...};

Potencia ES7
let base = 3;
let exponente = 2;
let potencia = base ** exponente;
console.log(potencia);

Webpack: empaquetador de módulos (bundler):
Gestión de dependencias
Ejecución de tareas
Conversión de formatos
Servidor de desarrollo
Carga y uso de módulos de todo tipo (AMD, CommonJS o ES2015)

Babel: compilador (o transpilador) para JavaScript. Transforma código moderno de JavaScript
para navegadores más antiguos. Mediante:
Transformaciones de sintaxis
Polyfills
Transformaciones de código fuente (codemods)

Novedades ECMAScript (ECMA2015+)
Funciones flechas (arrow functions)
Plantillas Literales (Template Literals)
Map y Set
Let y Const
Clases
Encadenamiento Opcional (Optional Chaining)
Operador Fusión Nula (Nullish Coalescing)
Métodos Privados (ES2021)
Operador de Asignación Local (ES2021)

JSX: extensión de la sintaxis de JavaScript
React no requiere usar JSX, pero la mayoría de la gente lo encuentra útil como ayuda
visual cuando trabajan con interfaz de usuario dentro del código Javascript.
Ej1:
const name = 'Josh Perez';
const element = <h1>Hello, {name}</h1>;
ReactDOM.render(
element,
document.getElementById('root')
);

Ej2:
function formatName(user) {
	return user.firstName + ' ' + user.lastName;
}
const user = { 
	firstName: 'Harper',
	lastName: 'Perez'
};
const element = (<h1>Hello, {formatName(user)}!</h1>);
ReactDOM.render(
	element,
	document.getElementById('root')
);

Después de compilarse, las expresiones JSX se convierten en llamadas a funcionesJavaScript
regulares y se evalúan en objetos JavaScript.
Esto significa que puedes usar JSX dentro de declaraciones if y bucles for, asignarlo a
variables, aceptarlo como argumento, y retornarlo desde dentro de funciones:
function getGreeting(user) {
	if (user) {
		return <h1>Hello, {formatName(user)}!</h1>;
	}
	return <h1>Hello, Stranger.</h1>;
}

const element = <a href="https://www.codoacodo.com.ar"> link </a>;

const element = <img src={user.avatarUrl}></img>;

Cuidado:
Dado que JSX es más cercano a JavaScript que a HTML, React DOM usa la convenciónde
nomenclatura camelCase en vez de nombres de atributos HTML.
Por ejemplo, class se vuelve className en JSX, y tabindex se vuelve tabIndex.

COMPONENTES:
para javascript, un componente no es más que una función que
recibe un objeto, al que llamaremos “props”, y retorna un elemento de React
que describe que va a aparecer en la pantalla.

COMPONENTE DE CLASE:
import React from 'reart'; 
class Clase extends React.Component {
	constructor() { 
		super();
		this.state = {saludo: "Hola! Soy un componente de clase"};
	}
	render() {
		return <h1>{this.state.saludo}</h1>;
	}
}

export default Clase;

COMPONENTE FUNCIONAL:
import React from 'react';
function Funcional() {
	const saludo = "Hola! Soy un componente funcionar";

	return <h1>{saludo}</h1>;
}

export default Funcional; 


REACT Firebase
npm install firebase
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyBfVidsaCRheYIXdiOBDEbQLr9mh7XAW28",
  authDomain: "grupo3-r3act.firebaseapp.com",
  projectId: "grupo3-r3act",
  storageBucket: "grupo3-r3act.appspot.com",
  messagingSenderId: "755368223035",
  appId: "1:755368223035:web:6d29d92a70b5e9f78b171e"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
__________________________________________________________________
npm install -g firebase-tools

firebase login

firebase init

firebase deploy



